//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Advanced/ControlsInput/ControlsInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsInput"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""cce1d795-599a-429d-b815-30b223bdec5e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e80854ac-acbf-4a82-946f-370035f009c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""ebd64d1c-374d-4820-8c3b-715bb60568f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c641d502-6eb6-4e29-b15a-289b39b76177"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""8540d2d5-9569-465b-af78-890b149dff2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6a75b8cd-0ede-44e4-89ef-c91097734624"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3bded9bc-bb5d-4a2e-897b-cf180d71422a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71a40b66-a009-466d-9d02-551ff2c59ba2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0a8f7f10-bae4-4681-9e9e-5b35746d1a92"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7cd15e13-d53b-40ab-a389-52084712f491"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""484c2c1f-6ddd-46b2-b7ed-5a29ba88a5a3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a186067a-6d6a-4001-b0fb-8b8e5459a881"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01347162-6d43-41e6-8e88-a591c354cd38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5f778c10-5805-4eae-a775-193b73398258"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b8835af-1c33-4a55-adbe-014eab2e1787"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d18a424-a527-4263-aff8-064dfc130f87"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8b97137-2d7c-49ef-9902-1eacb796d5c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2abe3fe3-e42a-412a-a815-b083c83fd0ae"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ef9b753-8b88-4619-8a46-259347bcc7c4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5c8e8ce-1268-426e-a057-500b924663dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""299c193c-e4b7-4e66-971f-0b1210bf8c8e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee71ecfa-dbad-450b-9940-a37293dedf1a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e25010a7-2c84-4875-ae07-07dc27618a91"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShopAction"",
            ""id"": ""31753471-826b-4219-a362-d28ff71119cb"",
            ""actions"": [
                {
                    ""name"": ""MoveActionRight"",
                    ""type"": ""Button"",
                    ""id"": ""45393e88-7dbc-4fc1-b02e-e2fc000c30ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveActionLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5cf8ad8d-890a-463e-b790-b935af0f759b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuyButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""2cd31bca-124f-4eb3-9406-84cf5dcf1bb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e8aa8ad-cab6-4c42-9801-abacafd1581c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveActionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e005c49d-33db-436c-bca1-4f9733322ed2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""MoveActionRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""923d2b36-c281-469d-94c4-0b94cbd5b745"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveActionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbbac6d4-788c-4fb7-9e2c-aa9e72b2ea45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""MoveActionLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01836e57-c46c-4be3-93c6-32ddc8417184"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""BuyButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0a829e4-7c20-4f87-89ce-61fc336671ca"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BuyButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sequence"",
            ""id"": ""b91deac7-87c0-4d88-99fb-664d08cbd235"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""b179e81c-4042-4edf-8f51-c5079a995125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""1ca9ed98-76b8-4508-aa1a-c700c6802703"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""e513302e-c919-4aa3-a0ac-fc6df9443610"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""d542e1a9-c001-48f2-8989-22a64b3e1e62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8424b9a3-1aa9-4289-a514-8ad231def138"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a66d650-3a4d-45a1-b421-6cc7aa337884"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3eba07c1-ea57-4171-80f2-d437929282d5"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18d9c755-5f0a-47c3-abd8-ccb6f00da3be"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3da48071-ad2e-452b-b060-ce3843b82dbf"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""980efed1-afe1-4f00-b3e1-4a42d7bd8e18"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""908efd45-1709-4e0c-98b6-41b03f372aba"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b953743b-74f9-4137-9db6-94ff1fc7a8db"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Traditional"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Traditional"",
            ""bindingGroup"": ""Traditional"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Move = m_Controls.FindAction("Move", throwIfNotFound: true);
        m_Controls_Look = m_Controls.FindAction("Look", throwIfNotFound: true);
        m_Controls_Jump = m_Controls.FindAction("Jump", throwIfNotFound: true);
        m_Controls_Sprint = m_Controls.FindAction("Sprint", throwIfNotFound: true);
        m_Controls_Pause = m_Controls.FindAction("Pause", throwIfNotFound: true);
        m_Controls_Interact = m_Controls.FindAction("Interact", throwIfNotFound: true);
        // ShopAction
        m_ShopAction = asset.FindActionMap("ShopAction", throwIfNotFound: true);
        m_ShopAction_MoveActionRight = m_ShopAction.FindAction("MoveActionRight", throwIfNotFound: true);
        m_ShopAction_MoveActionLeft = m_ShopAction.FindAction("MoveActionLeft", throwIfNotFound: true);
        m_ShopAction_BuyButtonPressed = m_ShopAction.FindAction("BuyButtonPressed", throwIfNotFound: true);
        // Sequence
        m_Sequence = asset.FindActionMap("Sequence", throwIfNotFound: true);
        m_Sequence_A = m_Sequence.FindAction("A", throwIfNotFound: true);
        m_Sequence_Y = m_Sequence.FindAction("Y", throwIfNotFound: true);
        m_Sequence_B = m_Sequence.FindAction("B", throwIfNotFound: true);
        m_Sequence_X = m_Sequence.FindAction("X", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Move;
    private readonly InputAction m_Controls_Look;
    private readonly InputAction m_Controls_Jump;
    private readonly InputAction m_Controls_Sprint;
    private readonly InputAction m_Controls_Pause;
    private readonly InputAction m_Controls_Interact;
    public struct ControlsActions
    {
        private @ControlsInput m_Wrapper;
        public ControlsActions(@ControlsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Controls_Move;
        public InputAction @Look => m_Wrapper.m_Controls_Look;
        public InputAction @Jump => m_Wrapper.m_Controls_Jump;
        public InputAction @Sprint => m_Wrapper.m_Controls_Sprint;
        public InputAction @Pause => m_Wrapper.m_Controls_Pause;
        public InputAction @Interact => m_Wrapper.m_Controls_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // ShopAction
    private readonly InputActionMap m_ShopAction;
    private List<IShopActionActions> m_ShopActionActionsCallbackInterfaces = new List<IShopActionActions>();
    private readonly InputAction m_ShopAction_MoveActionRight;
    private readonly InputAction m_ShopAction_MoveActionLeft;
    private readonly InputAction m_ShopAction_BuyButtonPressed;
    public struct ShopActionActions
    {
        private @ControlsInput m_Wrapper;
        public ShopActionActions(@ControlsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveActionRight => m_Wrapper.m_ShopAction_MoveActionRight;
        public InputAction @MoveActionLeft => m_Wrapper.m_ShopAction_MoveActionLeft;
        public InputAction @BuyButtonPressed => m_Wrapper.m_ShopAction_BuyButtonPressed;
        public InputActionMap Get() { return m_Wrapper.m_ShopAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShopActionActions set) { return set.Get(); }
        public void AddCallbacks(IShopActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ShopActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShopActionActionsCallbackInterfaces.Add(instance);
            @MoveActionRight.started += instance.OnMoveActionRight;
            @MoveActionRight.performed += instance.OnMoveActionRight;
            @MoveActionRight.canceled += instance.OnMoveActionRight;
            @MoveActionLeft.started += instance.OnMoveActionLeft;
            @MoveActionLeft.performed += instance.OnMoveActionLeft;
            @MoveActionLeft.canceled += instance.OnMoveActionLeft;
            @BuyButtonPressed.started += instance.OnBuyButtonPressed;
            @BuyButtonPressed.performed += instance.OnBuyButtonPressed;
            @BuyButtonPressed.canceled += instance.OnBuyButtonPressed;
        }

        private void UnregisterCallbacks(IShopActionActions instance)
        {
            @MoveActionRight.started -= instance.OnMoveActionRight;
            @MoveActionRight.performed -= instance.OnMoveActionRight;
            @MoveActionRight.canceled -= instance.OnMoveActionRight;
            @MoveActionLeft.started -= instance.OnMoveActionLeft;
            @MoveActionLeft.performed -= instance.OnMoveActionLeft;
            @MoveActionLeft.canceled -= instance.OnMoveActionLeft;
            @BuyButtonPressed.started -= instance.OnBuyButtonPressed;
            @BuyButtonPressed.performed -= instance.OnBuyButtonPressed;
            @BuyButtonPressed.canceled -= instance.OnBuyButtonPressed;
        }

        public void RemoveCallbacks(IShopActionActions instance)
        {
            if (m_Wrapper.m_ShopActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShopActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ShopActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShopActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShopActionActions @ShopAction => new ShopActionActions(this);

    // Sequence
    private readonly InputActionMap m_Sequence;
    private List<ISequenceActions> m_SequenceActionsCallbackInterfaces = new List<ISequenceActions>();
    private readonly InputAction m_Sequence_A;
    private readonly InputAction m_Sequence_Y;
    private readonly InputAction m_Sequence_B;
    private readonly InputAction m_Sequence_X;
    public struct SequenceActions
    {
        private @ControlsInput m_Wrapper;
        public SequenceActions(@ControlsInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Sequence_A;
        public InputAction @Y => m_Wrapper.m_Sequence_Y;
        public InputAction @B => m_Wrapper.m_Sequence_B;
        public InputAction @X => m_Wrapper.m_Sequence_X;
        public InputActionMap Get() { return m_Wrapper.m_Sequence; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SequenceActions set) { return set.Get(); }
        public void AddCallbacks(ISequenceActions instance)
        {
            if (instance == null || m_Wrapper.m_SequenceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SequenceActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
        }

        private void UnregisterCallbacks(ISequenceActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
        }

        public void RemoveCallbacks(ISequenceActions instance)
        {
            if (m_Wrapper.m_SequenceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISequenceActions instance)
        {
            foreach (var item in m_Wrapper.m_SequenceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SequenceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SequenceActions @Sequence => new SequenceActions(this);
    private int m_TraditionalSchemeIndex = -1;
    public InputControlScheme TraditionalScheme
    {
        get
        {
            if (m_TraditionalSchemeIndex == -1) m_TraditionalSchemeIndex = asset.FindControlSchemeIndex("Traditional");
            return asset.controlSchemes[m_TraditionalSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IShopActionActions
    {
        void OnMoveActionRight(InputAction.CallbackContext context);
        void OnMoveActionLeft(InputAction.CallbackContext context);
        void OnBuyButtonPressed(InputAction.CallbackContext context);
    }
    public interface ISequenceActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
    }
}
